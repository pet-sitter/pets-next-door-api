basePath: /api
definitions:
  auth.KakaoCallbackView:
    properties:
      authToken:
        type: string
      email:
        type: string
      fbProviderType:
        $ref: '#/definitions/user.FirebaseProviderType'
      fbUid:
        type: string
      photoURL:
        type: string
    type: object
  media.MediaType:
    enum:
    - image
    type: string
    x-enum-varnames:
    - IMAGE_MEDIA_TYPE
  media.MediaView:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      mediaType:
        $ref: '#/definitions/media.MediaType'
      url:
        type: string
    type: object
  pet.AddPetRequest:
    properties:
      birth_date:
        type: string
      breed:
        type: string
      name:
        type: string
      neutered:
        type: boolean
      pet_type:
        allOf:
        - $ref: '#/definitions/pet.PetType'
        enum:
        - dog
        - cat
      sex:
        allOf:
        - $ref: '#/definitions/pet.PetSex'
        enum:
        - male
        - female
      weight_in_kg:
        type: number
    required:
    - birth_date
    - breed
    - name
    - neutered
    - pet_type
    - sex
    - weight_in_kg
    type: object
  pet.AddPetsToOwnerRequest:
    properties:
      pets:
        items:
          $ref: '#/definitions/pet.AddPetRequest'
        type: array
    required:
    - pets
    type: object
  pet.BreedView:
    properties:
      id:
        type: integer
      name:
        type: string
      pet_type:
        $ref: '#/definitions/pet.PetType'
    type: object
  pet.FindMyPetsView:
    properties:
      pets:
        items:
          $ref: '#/definitions/pet.PetView'
        type: array
    type: object
  pet.PetSex:
    enum:
    - male
    - female
    type: string
    x-enum-varnames:
    - PetSexMale
    - PetSexFemale
  pet.PetType:
    enum:
    - dog
    - cat
    type: string
    x-enum-varnames:
    - PetTypeDog
    - PetTypeCat
  pet.PetView:
    properties:
      birth_date:
        type: string
      breed:
        type: string
      id:
        type: integer
      name:
        type: string
      neutered:
        type: boolean
      pet_type:
        $ref: '#/definitions/pet.PetType'
      sex:
        $ref: '#/definitions/pet.PetSex'
      weight_in_kg:
        type: number
    type: object
  pnd.ItemListView-sos_post_ConditionView:
    properties:
      items:
        items:
          $ref: '#/definitions/sos_post.ConditionView'
        type: array
    type: object
  pnd.PaginatedView-pet_BreedView:
    properties:
      items:
        items:
          $ref: '#/definitions/pet.BreedView'
        type: array
      page:
        type: integer
      size:
        type: integer
    type: object
  pnd.PaginatedView-sos_post_FindSosPostView:
    properties:
      items:
        items:
          $ref: '#/definitions/sos_post.FindSosPostView'
        type: array
      page:
        type: integer
      size:
        type: integer
    type: object
  pnd.PaginatedView-user_UserWithoutPrivateInfo:
    properties:
      items:
        items:
          $ref: '#/definitions/user.UserWithoutPrivateInfo'
        type: array
      page:
        type: integer
      size:
        type: integer
    type: object
  sos_post.CareType:
    enum:
    - foster
    - visiting
    type: string
    x-enum-varnames:
    - CareTypeFoster
    - CareTypeVisiting
  sos_post.CarerGender:
    enum:
    - male
    - female
    type: string
    x-enum-varnames:
    - CarerGenderMale
    - CarerGenderFemale
  sos_post.ConditionView:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  sos_post.FindSosPostView:
    properties:
      author_id:
        type: integer
      care_type:
        $ref: '#/definitions/sos_post.CareType'
      carer_gender:
        $ref: '#/definitions/sos_post.CarerGender'
      conditions:
        items:
          $ref: '#/definitions/sos_post.ConditionView'
        type: array
      content:
        type: string
      created_at:
        type: string
      date_end_at:
        type: string
      date_start_at:
        type: string
      id:
        type: integer
      media:
        items:
          $ref: '#/definitions/media.MediaView'
        type: array
      pets:
        items:
          $ref: '#/definitions/pet.PetView'
        type: array
      reward:
        type: string
      reward_amount:
        $ref: '#/definitions/sos_post.RewardAmount'
      thumbnail_id:
        type: integer
      time_end_at:
        type: string
      time_start_at:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  sos_post.RewardAmount:
    enum:
    - hour
    type: string
    x-enum-varnames:
    - RewardAmountHour
  sos_post.UpdateSosPostRequest:
    properties:
      care_type:
        allOf:
        - $ref: '#/definitions/sos_post.CareType'
        enum:
        - foster
        - visiting
      carer_gender:
        allOf:
        - $ref: '#/definitions/sos_post.CarerGender'
        enum:
        - male
        - female
      condition_ids:
        items:
          type: integer
        type: array
      content:
        type: string
      date_end_at:
        type: string
      date_start_at:
        type: string
      id:
        type: integer
      image_ids:
        items:
          type: integer
        type: array
      pet_ids:
        items:
          type: integer
        type: array
      reward:
        type: string
      reward_amount:
        allOf:
        - $ref: '#/definitions/sos_post.RewardAmount'
        enum:
        - hour
      time_end_at:
        type: string
      time_start_at:
        type: string
      title:
        type: string
    required:
    - care_type
    - carer_gender
    - content
    - date_end_at
    - date_start_at
    - id
    - image_ids
    - reward
    - reward_amount
    - time_end_at
    - time_start_at
    - title
    type: object
  sos_post.WriteSosPostRequest:
    properties:
      care_type:
        allOf:
        - $ref: '#/definitions/sos_post.CareType'
        enum:
        - foster
        - visiting
      carer_gender:
        allOf:
        - $ref: '#/definitions/sos_post.CarerGender'
        enum:
        - male
        - female
      condition_ids:
        items:
          type: integer
        type: array
      content:
        type: string
      date_end_at:
        type: string
      date_start_at:
        type: string
      image_ids:
        items:
          type: integer
        type: array
      pet_ids:
        items:
          type: integer
        type: array
      reward:
        type: string
      reward_amount:
        allOf:
        - $ref: '#/definitions/sos_post.RewardAmount'
        enum:
        - hour
      time_end_at:
        type: string
      time_start_at:
        type: string
      title:
        type: string
    required:
    - care_type
    - carer_gender
    - content
    - date_end_at
    - date_start_at
    - image_ids
    - reward
    - reward_amount
    - time_end_at
    - time_start_at
    - title
    type: object
  sos_post.WriteSosPostView:
    properties:
      author_id:
        type: integer
      care_type:
        $ref: '#/definitions/sos_post.CareType'
      carer_gender:
        $ref: '#/definitions/sos_post.CarerGender'
      conditions:
        items:
          $ref: '#/definitions/sos_post.ConditionView'
        type: array
      content:
        type: string
      created_at:
        type: string
      date_end_at:
        type: string
      date_start_at:
        type: string
      id:
        type: integer
      media:
        items:
          $ref: '#/definitions/media.MediaView'
        type: array
      pets:
        items:
          $ref: '#/definitions/pet.PetView'
        type: array
      reward:
        type: string
      reward_amount:
        $ref: '#/definitions/sos_post.RewardAmount'
      thumbnail_id:
        type: integer
      time_end_at:
        type: string
      time_start_at:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  user.CheckNicknameRequest:
    properties:
      nickname:
        type: string
    required:
    - nickname
    type: object
  user.CheckNicknameView:
    properties:
      isAvailable:
        type: boolean
    type: object
  user.FirebaseProviderType:
    enum:
    - email
    - google
    - apple
    - kakao
    type: string
    x-enum-varnames:
    - FirebaseProviderTypeEmail
    - FirebaseProviderTypeGoogle
    - FirebaseProviderTypeApple
    - FirebaseProviderTypeKakao
  user.MyProfileView:
    properties:
      email:
        type: string
      fbProviderType:
        $ref: '#/definitions/user.FirebaseProviderType'
      fullname:
        type: string
      id:
        type: integer
      nickname:
        type: string
      profileImageUrl:
        type: string
    type: object
  user.RegisterUserRequest:
    properties:
      email:
        type: string
      fbProviderType:
        $ref: '#/definitions/user.FirebaseProviderType'
      fbUid:
        type: string
      fullname:
        type: string
      nickname:
        type: string
      profileImageId:
        type: integer
    required:
    - email
    - fbProviderType
    - fbUid
    - fullname
    - nickname
    type: object
  user.RegisterUserView:
    properties:
      email:
        type: string
      fbProviderType:
        $ref: '#/definitions/user.FirebaseProviderType'
      fbUid:
        type: string
      fullname:
        type: string
      id:
        type: integer
      nickname:
        type: string
      profileImageUrl:
        type: string
    type: object
  user.UpdateUserRequest:
    properties:
      nickname:
        type: string
      profileImageId:
        type: integer
    type: object
  user.UpdateUserView:
    properties:
      email:
        type: string
      fbProviderType:
        $ref: '#/definitions/user.FirebaseProviderType'
      fullname:
        type: string
      id:
        type: integer
      nickname:
        type: string
      profileImageUrl:
        type: string
    type: object
  user.UserRegistrationStatus:
    enum:
    - NOT_REGISTERED
    - REGISTERED
    type: string
    x-enum-varnames:
    - UserStatusNotRegistered
    - UserStatusRegistered
  user.UserStatusRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  user.UserStatusView:
    properties:
      fbProviderType:
        $ref: '#/definitions/user.FirebaseProviderType'
      status:
        $ref: '#/definitions/user.UserRegistrationStatus'
    type: object
  user.UserWithoutPrivateInfo:
    properties:
      id:
        type: integer
      nickname:
        type: string
      profileImageUrl:
        type: string
    type: object
info:
  contact:
    email: petsnextdoordev@gmail.com
    name: API Support
  description: 이웃집멍냥 백엔드 API 문서입니다.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: 이웃집멍냥 API 문서
  version: 0.7.0
paths:
  /auth/callback/kakao:
    get:
      description: Kakao 로그인 콜백을 처리하고, 사용자 기본 정보와 함께 Firebase Custom Token을 발급합니다.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.KakaoCallbackView'
      summary: Kakao 회원가입 콜백 API
      tags:
      - auth
  /auth/login/kakao:
    get:
      responses:
        "302":
          description: Found
      summary: Kakao 로그인 페이지로 redirect 합니다.
      tags:
      - auth
  /breeds:
    get:
      consumes:
      - application/json
      parameters:
      - default: 1
        description: 페이지 번호
        in: query
        name: page
        type: integer
      - default: 20
        description: 페이지 사이즈
        in: query
        name: size
        type: integer
      - description: 펫 종류
        enum:
        - dog
        - cat
        in: query
        name: pet_type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pnd.PaginatedView-pet_BreedView'
      summary: 견/묘종을 조회합니다.
      tags:
      - pets
  /media/{id}:
    get:
      parameters:
      - description: 미디어 ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/media.MediaView'
      summary: 미디어를 ID로 조회합니다.
      tags:
      - media
  /media/images:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: 이미지 파일
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/media.MediaView'
      summary: 이미지를 업로드합니다.
      tags:
      - media
  /posts/sos:
    get:
      consumes:
      - application/json
      parameters:
      - description: 작성자 ID
        in: query
        name: author_id
        type: integer
      - default: 1
        description: 페이지 번호
        in: query
        name: page
        type: integer
      - default: 20
        description: 페이지 사이즈
        in: query
        name: size
        type: integer
      - description: 정렬 기준
        enum:
        - newest
        - deadline
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pnd.PaginatedView-sos_post_FindSosPostView'
      summary: 돌봄급구 게시글을 조회합니다.
      tags:
      - posts
    post:
      consumes:
      - application/json
      parameters:
      - description: 돌봄급구 게시글 업로드 요청
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/sos_post.WriteSosPostRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/sos_post.WriteSosPostView'
      security:
      - FirebaseAuth: []
      summary: 돌봄급구 게시글을 업로드합니다.
      tags:
      - posts
    put:
      consumes:
      - application/json
      parameters:
      - description: 돌봄급구 수정 요청
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/sos_post.UpdateSosPostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - FirebaseAuth: []
      summary: 돌봄급구 게시글을 수정합니다.
      tags:
      - posts
  /posts/sos/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: 게시글 ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/sos_post.FindSosPostView'
      summary: 게시글 ID로 돌봄급구 게시글을 조회합니다.
      tags:
      - posts
  /posts/sos/conditions:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pnd.ItemListView-sos_post_ConditionView'
      summary: 돌봄 조건을 조회합니다.
      tags:
      - posts
  /users:
    get:
      parameters:
      - default: 1
        description: 페이지 번호
        in: query
        name: page
        type: integer
      - default: 10
        description: 페이지 사이즈
        in: query
        name: size
        type: integer
      - description: 닉네임 (완전 일치)
        in: query
        name: nickname
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pnd.PaginatedView-user_UserWithoutPrivateInfo'
      security:
      - FirebaseAuth: []
      summary: 사용자 목록을 조회합니다.
      tags:
      - users
    post:
      consumes:
      - application/json
      parameters:
      - description: 사용자 회원가입 요청
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user.RegisterUserView'
      summary: 파이어베이스 가입 이후 정보를 입력 받아 유저를 생성합니다.
      tags:
      - users
  /users/check/nickname:
    post:
      consumes:
      - application/json
      parameters:
      - description: 사용자 닉네임 중복 조회 요청
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.CheckNicknameRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.CheckNicknameView'
      summary: 닉네임 중복 여부를 조회합니다.
      tags:
      - users
  /users/me:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.MyProfileView'
      security:
      - FirebaseAuth: []
      summary: 내 프로필 정보를 조회합니다.
      tags:
      - users
    put:
      consumes:
      - application/json
      parameters:
      - description: 사용자 프로필 수정 요청
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UpdateUserView'
      security:
      - FirebaseAuth: []
      summary: 내 프로필 정보를 수정합니다.
      tags:
      - users
  /users/me/pets:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pet.FindMyPetsView'
      security:
      - FirebaseAuth: []
      summary: 내 반려동물 목록을 조회합니다.
      tags:
      - users
      - pets
    put:
      consumes:
      - application/json
      parameters:
      - description: 반려동물 등록 요청
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/pet.AddPetsToOwnerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - FirebaseAuth: []
      summary: 내 반려동물을 등록합니다.
      tags:
      - users
      - pets
  /users/status:
    post:
      consumes:
      - application/json
      parameters:
      - description: 사용자 가입 상태 조회 요청
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UserStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserStatusView'
      summary: 이메일로 유저의 가입 상태를 조회합니다.
      tags:
      - users
securityDefinitions:
  FirebaseAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
