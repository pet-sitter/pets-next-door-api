// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package databasegen

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users
(email,
 nickname,
 fullname,
 password,
 profile_image_id,
 fb_provider_type,
 fb_uid,
 created_at,
 updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, NOW(), NOW())
RETURNING id, email, nickname, fullname, profile_image_id, fb_provider_type, fb_uid, created_at, updated_at
`

type CreateUserParams struct {
	Email          string
	Nickname       string
	Fullname       string
	Password       string
	ProfileImageID sql.NullInt64
	FbProviderType sql.NullString
	FbUid          sql.NullString
}

type CreateUserRow struct {
	ID             int32
	Email          string
	Nickname       string
	Fullname       string
	ProfileImageID sql.NullInt64
	FbProviderType sql.NullString
	FbUid          sql.NullString
	CreatedAt      time.Time
	UpdatedAt      time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.Nickname,
		arg.Fullname,
		arg.Password,
		arg.ProfileImageID,
		arg.FbProviderType,
		arg.FbUid,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Nickname,
		&i.Fullname,
		&i.ProfileImageID,
		&i.FbProviderType,
		&i.FbUid,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserByUID = `-- name: DeleteUserByUID :exec
UPDATE
    users
SET deleted_at = NOW()
WHERE fb_uid = $1
`

func (q *Queries) DeleteUserByUID(ctx context.Context, fbUid sql.NullString) error {
	_, err := q.db.ExecContext(ctx, deleteUserByUID, fbUid)
	return err
}

const existsUserByNickname = `-- name: ExistsUserByNickname :one
SELECT CASE
           WHEN
               EXISTS (SELECT 1
                       FROM users
                       WHERE nickname = $1
                         AND deleted_at IS NULL)
               THEN TRUE
           ELSE FALSE
           END
`

func (q *Queries) ExistsUserByNickname(ctx context.Context, nickname string) (bool, error) {
	row := q.db.QueryRowContext(ctx, existsUserByNickname, nickname)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT users.id,
       users.email,
       users.nickname,
       users.fullname,
       media.url AS profile_image_url,
       users.fb_provider_type,
       users.fb_uid,
       users.created_at,
       users.updated_at
FROM users
         LEFT OUTER JOIN
     media
     ON
         users.profile_image_id = media.id
WHERE users.email = $1
  AND users.deleted_at IS NULL
`

type FindUserByEmailRow struct {
	ID              int32
	Email           string
	Nickname        string
	Fullname        string
	ProfileImageUrl sql.NullString
	FbProviderType  sql.NullString
	FbUid           sql.NullString
	CreatedAt       time.Time
	UpdatedAt       time.Time
}

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (FindUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, email)
	var i FindUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Nickname,
		&i.Fullname,
		&i.ProfileImageUrl,
		&i.FbProviderType,
		&i.FbUid,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserByUID = `-- name: FindUserByUID :one
SELECT users.id,
       users.email,
       users.nickname,
       users.fullname,
       media.url AS profile_image_url,
       users.fb_provider_type,
       users.fb_uid,
       users.created_at,
       users.updated_at
FROM users
         LEFT JOIN
     media
     ON
         users.profile_image_id = media.id
WHERE users.fb_uid = $1
  AND users.deleted_at IS NULL
`

type FindUserByUIDRow struct {
	ID              int32
	Email           string
	Nickname        string
	Fullname        string
	ProfileImageUrl sql.NullString
	FbProviderType  sql.NullString
	FbUid           sql.NullString
	CreatedAt       time.Time
	UpdatedAt       time.Time
}

func (q *Queries) FindUserByUID(ctx context.Context, fbUid sql.NullString) (FindUserByUIDRow, error) {
	row := q.db.QueryRowContext(ctx, findUserByUID, fbUid)
	var i FindUserByUIDRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Nickname,
		&i.Fullname,
		&i.ProfileImageUrl,
		&i.FbProviderType,
		&i.FbUid,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserIDByFbUID = `-- name: FindUserIDByFbUID :one
SELECT id
FROM users
WHERE fb_uid = $1
  AND deleted_at IS NULL
`

func (q *Queries) FindUserIDByFbUID(ctx context.Context, fbUid sql.NullString) (int32, error) {
	row := q.db.QueryRowContext(ctx, findUserIDByFbUID, fbUid)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const findUserStatusByEmail = `-- name: FindUserStatusByEmail :one
SELECT fb_provider_type
FROM users
WHERE email = $1
  AND deleted_at IS NULL
`

func (q *Queries) FindUserStatusByEmail(ctx context.Context, email string) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, findUserStatusByEmail, email)
	var fb_provider_type sql.NullString
	err := row.Scan(&fb_provider_type)
	return fb_provider_type, err
}

const findUsers = `-- name: FindUsers :many
SELECT users.id,
       users.nickname,
       media.url AS profile_image_url
FROM users
         LEFT OUTER JOIN
     media
     ON
         users.profile_image_id = media.id
WHERE (users.nickname = $1 OR $1 IS NULL)
  AND users.deleted_at IS NULL
ORDER BY users.created_at DESC
LIMIT $2 OFFSET $3
`

type FindUsersParams struct {
	Nickname string
	Limit    int32
	Offset   int32
}

type FindUsersRow struct {
	ID              int32
	Nickname        string
	ProfileImageUrl sql.NullString
}

func (q *Queries) FindUsers(ctx context.Context, arg FindUsersParams) ([]FindUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, findUsers, arg.Nickname, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindUsersRow
	for rows.Next() {
		var i FindUsersRow
		if err := rows.Scan(&i.ID, &i.Nickname, &i.ProfileImageUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUsersByID = `-- name: FindUsersByID :one
SELECT users.id,
       users.email,
       users.nickname,
       users.fullname,
       media.url AS profile_image_url,
       users.fb_provider_type,
       users.fb_uid,
       users.created_at,
       users.updated_at,
       users.deleted_at
FROM users
         LEFT OUTER JOIN
     media
     ON
         users.profile_image_id = media.id
WHERE users.id = $1
  AND (users.deleted_at IS NULL OR $2)
`

type FindUsersByIDParams struct {
	ID      int32
	Column2 interface{}
}

type FindUsersByIDRow struct {
	ID              int32
	Email           string
	Nickname        string
	Fullname        string
	ProfileImageUrl sql.NullString
	FbProviderType  sql.NullString
	FbUid           sql.NullString
	CreatedAt       time.Time
	UpdatedAt       time.Time
	DeletedAt       sql.NullTime
}

func (q *Queries) FindUsersByID(ctx context.Context, arg FindUsersByIDParams) (FindUsersByIDRow, error) {
	row := q.db.QueryRowContext(ctx, findUsersByID, arg.ID, arg.Column2)
	var i FindUsersByIDRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Nickname,
		&i.Fullname,
		&i.ProfileImageUrl,
		&i.FbProviderType,
		&i.FbUid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateUserByUID = `-- name: UpdateUserByUID :one
UPDATE
    users
SET nickname         = $1,
    profile_image_id = $2,
    updated_at       = NOW()
WHERE fb_uid = $3
  AND deleted_at IS NULL
RETURNING
    id,
    email,
    nickname,
    fullname,
    profile_image_id,
    fb_provider_type,
    fb_uid,
    created_at,
    updated_at
`

type UpdateUserByUIDParams struct {
	Nickname       string
	ProfileImageID sql.NullInt64
	FbUid          sql.NullString
}

type UpdateUserByUIDRow struct {
	ID             int32
	Email          string
	Nickname       string
	Fullname       string
	ProfileImageID sql.NullInt64
	FbProviderType sql.NullString
	FbUid          sql.NullString
	CreatedAt      time.Time
	UpdatedAt      time.Time
}

func (q *Queries) UpdateUserByUID(ctx context.Context, arg UpdateUserByUIDParams) (UpdateUserByUIDRow, error) {
	row := q.db.QueryRowContext(ctx, updateUserByUID, arg.Nickname, arg.ProfileImageID, arg.FbUid)
	var i UpdateUserByUIDRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Nickname,
		&i.Fullname,
		&i.ProfileImageID,
		&i.FbProviderType,
		&i.FbUid,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
