// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: resource_media.sql

package databasegen

import (
	"context"
	"database/sql"
	"time"
)

const createResourceMedia = `-- name: CreateResourceMedia :one
INSERT INTO resource_media
(resource_id,
 media_id,
 resource_type,
 created_at,
 updated_at)
VALUES ($1, $2, $3, NOW(), NOW())
RETURNING id, resource_id, media_id, resource_type, created_at, updated_at
`

type CreateResourceMediaParams struct {
	ResourceID   sql.NullInt64
	MediaID      sql.NullInt64
	ResourceType sql.NullString
}

type CreateResourceMediaRow struct {
	ID           int32
	ResourceID   sql.NullInt64
	MediaID      sql.NullInt64
	ResourceType sql.NullString
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) CreateResourceMedia(ctx context.Context, arg CreateResourceMediaParams) (CreateResourceMediaRow, error) {
	row := q.db.QueryRowContext(ctx, createResourceMedia, arg.ResourceID, arg.MediaID, arg.ResourceType)
	var i CreateResourceMediaRow
	err := row.Scan(
		&i.ID,
		&i.ResourceID,
		&i.MediaID,
		&i.ResourceType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteResourceMediaByResourceID = `-- name: DeleteResourceMediaByResourceID :exec
UPDATE
    resource_media
SET
    deleted_at = NOW()
WHERE
    resource_id = $1
`

func (q *Queries) DeleteResourceMediaByResourceID(ctx context.Context, resourceID sql.NullInt64) error {
	_, err := q.db.ExecContext(ctx, deleteResourceMediaByResourceID, resourceID)
	return err
}

const findResourceMedia = `-- name: FindResourceMedia :many
SELECT m.id AS media_id,
       m.media_type,
       m.url,
       m.created_at,
       m.updated_at
FROM resource_media rm
         INNER JOIN
     media m
     ON
         rm.media_id = m.id
WHERE (rm.resource_id = $1 OR $1 IS NULL)
  AND (rm.resource_type = $2 OR $2 IS NULL)
  AND ($3::BOOLEAN = TRUE OR
       ($3::BOOLEAN = FALSE AND rm.deleted_at IS NULL))
`

type FindResourceMediaParams struct {
	ResourceID     sql.NullInt64
	ResourceType   sql.NullString
	IncludeDeleted bool
}

type FindResourceMediaRow struct {
	MediaID   int32
	MediaType string
	Url       string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) FindResourceMedia(ctx context.Context, arg FindResourceMediaParams) ([]FindResourceMediaRow, error) {
	rows, err := q.db.QueryContext(ctx, findResourceMedia, arg.ResourceID, arg.ResourceType, arg.IncludeDeleted)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindResourceMediaRow
	for rows.Next() {
		var i FindResourceMediaRow
		if err := rows.Scan(
			&i.MediaID,
			&i.MediaType,
			&i.Url,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
