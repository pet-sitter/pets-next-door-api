// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: breeds.sql

package databasegen

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createBreed = `-- name: CreateBreed :one
INSERT INTO breeds (id,
                    name,
                    pet_type,
                    created_at,
                    updated_at)
VALUES ($1, $2, $3, NOW(), NOW())
RETURNING id, pet_type, name, created_at, updated_at
`

type CreateBreedParams struct {
	ID      uuid.UUID
	Name    string
	PetType string
}

type CreateBreedRow struct {
	ID        uuid.UUID
	PetType   string
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateBreed(ctx context.Context, arg CreateBreedParams) (CreateBreedRow, error) {
	row := q.db.QueryRowContext(ctx, createBreed, arg.ID, arg.Name, arg.PetType)
	var i CreateBreedRow
	err := row.Scan(
		&i.ID,
		&i.PetType,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findBreeds = `-- name: FindBreeds :many
SELECT id,
       name,
       pet_type,
       created_at,
       updated_at
FROM breeds
WHERE (pet_type = $3 OR $3 IS NULL)
  AND (name = $4 OR $4 IS NULL)
  AND (deleted_at IS NULL OR $5::boolean = TRUE)
ORDER BY id
LIMIT $1 OFFSET $2
`

type FindBreedsParams struct {
	Limit          int32
	Offset         int32
	PetType        sql.NullString
	Name           sql.NullString
	IncludeDeleted bool
}

type FindBreedsRow struct {
	ID        uuid.UUID
	Name      string
	PetType   string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) FindBreeds(ctx context.Context, arg FindBreedsParams) ([]FindBreedsRow, error) {
	rows, err := q.db.QueryContext(ctx, findBreeds,
		arg.Limit,
		arg.Offset,
		arg.PetType,
		arg.Name,
		arg.IncludeDeleted,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindBreedsRow
	for rows.Next() {
		var i FindBreedsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PetType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
